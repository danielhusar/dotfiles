# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Git undo push changes
function gundo() {
 git push -f origin HEAD^:master
}

# Git add all files and push changes
function gpush() {
  branch_name="$(git symbolic-ref HEAD 2>/dev/null)"
  branch_name=${branch_name##refs/heads/}
  git add .
  git commit -m $1
  git push origin $branch_name --tags
}

# Git force pull changes
function gfpush() {
  branch_name="$(git symbolic-ref HEAD 2>/dev/null)"
  branch_name=${branch_name##refs/heads/}
  git push origin $branch_name --force-with-lease
}

# Git pull changes
function gpull() {
  if [ $# -eq 0 ]; then
    git pull origin master
  else
    git pull origin "$@"
  fi
}

# Git rebase
function grebase() {
  git add .
  git commit -m "rebasing"
  git rebase -i origin/master
}

# Git pull request
function gpr() {
  git pull-request -m $1
}

# Git commit
function gcommit() {
  git commit -a -m $1
}

# Git commit
function gamend() {
  git add --all
  git commit --amend
}

# Git create branch
function gcheckout() {
  git checkout -b $1
}

# Git checkout branch
function gbranch() {
  git checkout $1
}

# Git print all functions
function ghelp() {
  echo "gundo # undo latest push changes"
  echo "gpush # add all files and push"
  echo "gfpush # force push"
  echo "gpull # pull changes from master or specified branch"
  echo "grebase # interactive rebase with master"
  echo "gpr # create pull request"
  echo "gcommit # add all files and commit them"
  echo "gamend # amend the last commit"
  echo "gcheckout # create branch"
  echo "gbranch # switch to branch"
}

# Find shorthand
function f() {
    find . -name "$1"
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}"
  local ip=$(ipconfig getifaddr en1)
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}"
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise opens the given location
function s() {
  if [ $# -eq 0 ]; then
    open -a "Sublime Text" .
  else
    open -a "Sublime Text" "$@"
  fi
}

# `c` with no arguments opens the current directory in Code, otherwise
# opens the given location
function c() {
  if [ $# -eq 0 ]; then
    code .
  else
    code "$@"
  fi
}

# `o` with no arguments opens current directory, otherwise opens the given location
function o() {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# Get file with slovak proxy
function get(){
  vps "wget -O - $1" >> $(basename $1);
}

# Resize video
function process(){
  ffmpeg -i input.mp4 -c:v libx264 -crf 20 -filter:v scale="${2}:trunc(ow/a/2)*2" -an "$1-2x.mp4"
  ffmpeg -i input.mp4 -c:v libx264 -crf 20 -filter:v scale="${2}/2:trunc(ow/a/2)*2" -an "$1.mp4"
  ffmpeg -i "$1-2x.mp4" -ss 00:00:0 -f image2 -vframes 1 "$1-2x.png"
  ffmpeg -i "$1.mp4" -ss 00:00:0 -f image2 -vframes 1 "$1.png"
}

# Crop image
function img(){
  height="$(sips -g pixelHeight $1 | tail -n1 | cut -d' ' -f4)"
  name="$(basename "$1" .jpg)"
  convert "$1" -gravity center -quality 70 -crop "2800x${height}+0+0" "${name}-xlg.jpg"
  convert "$1" -gravity center -quality 70 -crop "2048x${height}+0+0" "${name}-lg.jpg"
  convert "$1" -gravity center -quality 70 -crop "1534x${height}+0+0" "${name}-md.jpg"
  convert "$1" -gravity center -quality 70 -crop "960x${height}+0+0" "${name}-sm.jpg"
}

function mobile(){
  fn="$1"
  of=`echo $1 | sed s/mp4/png/`
  lf=`ffprobe -show_streams "$fn" 2> /dev/null | grep nb_frames | head -1 | cut -d \= -f 2`
  rm -f "$of"
  let "lf = $lf - 1"
  ffmpeg -i $fn -vf select=\'eq\(n,$lf\) -vframes 1 $of
}

function png() {
  for f in *.png; do
    convert ./"$f" -colors 256 ${f%.jpg}
  done
}

function tojpg() {
  mkdir out; sips -s format jpeg *.* --out out
}

fbr() {
  git fetch
  local branches branch
  branches=$(git branch --sort=-committerdate) &&
  branch=$(echo "$branches" | fzf +s +m -e) &&
  git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}
